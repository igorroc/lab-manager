// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Period {
  MORNING
  AFTERNOON
  NIGHT
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id             String @id @default(cuid())
  name           String
  computerCount  Int
  projectorCount Int
  capacity       Int
  priority       Int    @default(0)
  active         Boolean @default(true)
  hasAir         Boolean @default(true)

  classGroups ClassGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id             String  @id @default(cuid())
  name           String
  code           String  @unique
  observation    String?
  semester       Int
  hours          Int
  priority       Int     @default(0)
  priorityPeriod Period?

  classGroups ClassGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Professor {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  phone       String?
  observation String?

  classGroups ClassGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassGroup {
  id          String  @id @default(cuid())
  name        String
  observation String?
  alumniCount Int
  color       String  @default("#275d2b")

  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId String
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?

  schedules Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id           String  @id @default(cuid())
  dayOfWeek    WeekDay
  startTime    String // Formato HH:mm
  endTime      String // Formato HH:mm

  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id])
  classGroupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}